[{"/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/components/compareCoins.js":"1","/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/helpers/sorting.js":"2","/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/configs/chartConfig.js":"3"},{"size":4957,"mtime":1606759869205,"results":"4","hashOfConfig":"5"},{"size":2306,"mtime":1606757056252,"results":"6","hashOfConfig":"5"},{"size":634,"mtime":1606753788920,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"mngrue",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/components/compareCoins.js",["16","17"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport Chartjs from 'chart.js';\r\nimport coinGecko from '../apis/coinGecko.js';\r\nimport {decideSort} from '../helpers/updateCompareCanvas.js';\r\nimport { Link } from 'react-router-dom';\r\nimport { compareChartOptions } from '../configs/chartConfig';\r\n\r\n\r\nconst CompareCoins = () => {\r\n  \r\n    const chartRef = useRef();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [coinsToCompare, setCoinsToCompare] = useState(false);\r\n    const [sortCondition, setSortCondition] = useState(\"current_price\");\r\n    const [sortSize, setSortSize] = useState(5);\r\n    const [currentChart, setCurrentChart] = useState(\"current_price\");\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            setIsLoading(true);\r\n            const response = await coinGecko.get('/coins/markets', {\r\n                params: {\r\n                    vs_currency: 'usd',\r\n                    ids: \"\"\r\n                }\r\n            });\r\n            setCoinsToCompare(response.data);\r\n            setIsLoading(false);\r\n        }\r\n\r\n        if (!coinsToCompare) {\r\n          fetchData();\r\n        }\r\n        \r\n        if (coinsToCompare) {\r\n          let sorted = decideSort(coinsToCompare, sortCondition, sortSize);\r\n          \r\n            const chart = new Chartjs(chartRef.current, {\r\n                type: 'bar',\r\n                data: {\r\n                  labels: sorted.map(c => c.name),\r\n                    datasets: [{\r\n                        label: sortCondition[0].toUpperCase() + sortCondition.replace(/_/g, \" \").slice(1),\r\n                        data: sorted.map(c => c[sortCondition]), \r\n                        backgroundColor: [\r\n                            'rgba(255, 99, 132, 0.5)',\r\n                            'rgba(54, 162, 235, 0.5)',\r\n                            'rgba(255, 206, 86, 0.5)',\r\n                            'rgba(75, 192, 192, 0.5)',\r\n                            'rgba(153, 102, 255, 0.5)',\r\n                            'rgba(255, 99, 132, 0.5)',\r\n                            'rgba(54, 162, 235, 0.5)',\r\n                            'rgba(255, 206, 86, 0.5)',\r\n                            'rgba(75, 192, 192, 0.5)',\r\n                            'rgba(153, 102, 255, 0.5)'\r\n                        ]\r\n                    }],\r\n                },\r\n                options: {\r\n                  ...compareChartOptions\r\n                }\r\n            })\r\n            setCurrentChart(chart);  \r\n        }\r\n      }, [coinsToCompare]);\r\n\r\n      const handleSortClick = (e) => {\r\n        currentChart.destroy();\r\n        setCoinsToCompare(false);\r\n        setSortCondition(e.target.id);\r\n      }\r\n\r\n      const handleSizeClick = (e) => {\r\n        currentChart.destroy();\r\n        setCoinsToCompare(false);\r\n        setSortSize(parseInt(e.target.id));\r\n      }\r\n\r\n      return (\r\n        <div className=\"bg-white border rounded p-3 chartDiv\">\r\n\r\n          <div id=\"canvas-div\">\r\n            <canvas ref={chartRef} id=\"myChart\" width={250} height={250}></canvas>\r\n          </div>\r\n\r\n          <div className=\"compare-container\">\r\n\r\n            <div className=\"chart-button mt-1 sort-buttons\">\r\n              <button\r\n                onClick={handleSortClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"current_price\"\r\n              >\r\n                Current price\r\n              </button>\r\n              <button\r\n                onClick={handleSortClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"market_cap\"\r\n              >\r\n                Market capitalization\r\n              </button>\r\n              <button\r\n                onClick={handleSortClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"total_volume\"\r\n              >\r\n                24H Volume\r\n              </button>\r\n              <button\r\n                onClick={handleSortClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"high_24h\"\r\n              >\r\n                24H High\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"chart-button mt-1\">\r\n              <button\r\n                onClick={handleSizeClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"5\"\r\n              >\r\n                Top 5\r\n              </button>\r\n              <button\r\n                onClick={handleSizeClick}\r\n                className=\"btn btn-outline-secondary btn-sm mx-1\"\r\n                id=\"10\"\r\n              >\r\n                Top 10\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"chart-button mt-1\">\r\n              <Link to=\"/\" className=\"btn btn-outline-secondary btn-sm\">\r\n                ‚Üê Back\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default CompareCoins;",["18","19"],"/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/helpers/sorting.js",[],"/mnt/c/Users/ptama/dev/flatiron/labs/cryptotracks/src/configs/chartConfig.js",[],{"ruleId":"20","severity":1,"message":"21","line":12,"column":12,"nodeType":"22","messageId":"23","endLine":12,"endColumn":21},{"ruleId":"24","severity":1,"message":"25","line":67,"column":10,"nodeType":"26","endLine":67,"endColumn":26,"suggestions":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'sortCondition' and 'sortSize'. Either include them or remove the dependency array.","ArrayExpression",["32"],"no-native-reassign",["33"],"no-negated-in-lhs",["34"],{"desc":"35","fix":"36"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [coinsToCompare, sortCondition, sortSize]",{"range":"37","text":"38"},[2514,2530],"[coinsToCompare, sortCondition, sortSize]"]